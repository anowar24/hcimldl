import pandas as pd
import os
import cv2
import numpy as np
import tensorflow as tf
from sklearn.model_selection import train_test_split

# Load data from train_list.csv
train_csv_file = 'path/to/your/train_list.csv'
train_df = pd.read_csv(train_csv_file)

train_image_paths = train_df['image'].tolist()
train_scores = train_df['mean_score'].tolist()

train_images = []
for image_path in train_image_paths:
    img = cv2.imread(os.path.join(data_dir, image_path))
    img = cv2.resize(img, (256, 192))
    img = img / 255.0
    train_images.append(img)

train_images = np.array(train_images)
train_scores = np.array(train_scores)

# Load data from test_list.csv
test_csv_file = 'path/to/your/test_list.csv'
test_df = pd.read_csv(test_csv_file)

test_image_paths = test_df['image'].tolist()
test_scores = test_df['mean_score'].tolist()

test_images = []
for image_path in test_image_paths:
    img = cv2.imread(os.path.join(data_dir, image_path))
    img = cv2.resize(img, (256, 192))
    img = img / 255.0
    test_images.append(img)

test_images = np.array(test_images)
test_scores = np.array(test_scores)

# Combine train and test data
images = np.concatenate((train_images, test_images), axis=0)
scores = np.concatenate((train_scores, test_scores), axis=0)

# Split the combined data into training, validation, and test sets
X_train, X_test, y_train, y_test = train_test_split(images, scores, test_size=0.2, random_state=42)
X_train, X_val, y_train, y_val = train_test_split(X_train, y_train, test_size=0.2, random_state=42)

# Define the CNN architecture
model = tf.keras.models.Sequential([
    tf.keras.layers.Conv2D(32, (3, 3), activation='relu', input_shape=(192, 256, 3)),
    tf.keras.layers.MaxPooling2D((2, 2)),
    tf.keras.layers.Flatten(),
    tf.keras.layers.Dense(64, activation='relu'),
    tf.keras.layers.Dense(1)
])

# Compile and train the CNN model
model.compile(optimizer='adam', loss='mean_squared_error', metrics=['mae'])
history = model.fit(X_train, y_train, validation_data=(X_val, y_val), epochs=10)

# Evaluate the model
test_loss, test_mae = model.evaluate(X_test, y_test)
print('Test Loss:', test_loss)
print('Test MAE:', test_mae)
